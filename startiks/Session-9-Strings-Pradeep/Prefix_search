class TrieNode(object):
    def __init__(self,val):
        self.val = val
        self.children = {}
        self.word_ending = False

class Trie(object):

    def __init__(self):
        root =

    def add_word(self,word):
        cur_node = self.root
        for c in word:
            if c  not in cur_node.children:
                cur_node.children[c] = TrieNode(c)

        cur_node.word_ending = True

    def ifword(self, word):
        for c in word:
            if c  not in cur_node.children:
                return False
            cur_node = cur_node.children[c]
        if cur_node.word_ending

    def ifprefix(self,word):
        for c in word:
            if c not in cur_node.children:
                return(False,None)
            cur_node = cur_node.children[c]
        return(True,cur_node)



    def search_prefix(self,prefix):
        (flag,cur_node) = ifprefix(prefix)
        if (!flag):
            return ([])
        else:
            result = []
            word = list(prefix)
            self.__collectall(curr_node,word,output)
            return result

    def __collectall(self,node,word,result):
        if node.word_ending{
            result.append(''.join(word))

        }
        for c in node.children:
            word.append(c)
            __collectall(node.children[c],word,result)
        word.pop()

    def sp(self, pat):
        output =[]
        self.search_pattern(root,pat,output)


    def search_pattern(self,node,idx,pat,word,output):

        if idx == len(pat):
            if node.word_ending:
                output.append(''.join(word))
                return
        if pat[idx]  != '.':
            word.append(pat[idx])
            search_pattern(node.children[pat[idx]],idx+1,word,output)

        else:
            for c in node.childrem{
            word.append(c)
            search_pattern()
            }


        node.children

#Radix Trees
Trie's are implemented

Find the string in part of a string -knuth Moris Pratt


# Every substring of a string is a prefix of a suffix
Suffix Tree :  is a prefix tree of all suffixes:

Algorithm:

UKKONEN's

Longest Palindromic Strings :

middle
for odd() you have to do the 2nd pass.

caracecarbra

Manacher's'



