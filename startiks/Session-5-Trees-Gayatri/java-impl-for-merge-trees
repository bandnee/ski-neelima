import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    static class Node {
        int val;
        Node left;
        Node right;
        public Node(int value) {
            this.val = value;
        }
    }

    static Node createTree(String data) {
        if (data == null || data.length() == 0) return null;
        StringTokenizer st = new StringTokenizer(data, " ");
        return deserialize(st);
    }

    static Node deserialize(StringTokenizer st) {
        if (!st.hasMoreTokens())
            return null;
        String s = st.nextToken();
        if (s.equals("#"))
            return null;
        Node root = new Node(Integer.valueOf(s));
        root.left = deserialize(st);
        root.right = deserialize(st);

        return root;
    }

    static void printInorder(Node root) {
    	if(root == null) return;
    	printInorder(root.left);
    	System.out.print(root.val+" ");
    	printInorder(root.right);
    }

/*
 * Complete the function below.
 */

    static Node mergeTrees(Node n1, Node n2) {


    }



public static void main(String[] args) throws IOException{
        Scanner in = new Scanner(System.in);

        int _size1;
        _size1 = Integer.parseInt(in.nextLine().trim());

        String _str1;
        try {
            _str1 = in.nextLine();
        } catch (Exception e) {
            _str1 = null;
        }
        Node n1 = createTree(_str1);

        int _size2;
        _size2 = Integer.parseInt(in.nextLine().trim());

        String _str2;
        try {
            _str2 = in.nextLine();
        } catch (Exception e) {
            _str2 = null;
        }
        Node n2 = createTree(_str2);
        Node res = mergeTrees(n1, n2);
        printInorder(res);

        }
}